AWSTemplateFormatVersion: "2010-09-09"
Description: Template to set up notification system with Lambda and SNS with inline Lambda code

Resources:
  NotificationRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaSNSNotificationRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: LambdaSNSPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "sns:Publish"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"

  SendNotificationLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: SendNotification
      Handler: index.handler
      Role: !GetAtt NotificationRole.Arn
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const sns = new AWS.SNS();
          exports.handler = async (event) => {
            const { message, subject, topicArn } = event;
            const params = {
              Message: message,
              Subject: subject,
              TopicArn: topicArn
            };
            try {
              const data = await sns.publish(params).promise();
              console.log("Message sent to the topic:", topicArn);
              console.log("MessageID is " + data.MessageId);
              return data.MessageId;
            } catch (err) {
              console.error(err, err.stack);
              throw new Error("Failed to send message");
            }
          };
      Runtime: "nodejs20.x"
      Timeout: 30
      Environment:
        Variables:
          REGISTRATION_TOPIC_ARN: !Ref RegistrationNotificationTopic
          LOGIN_TOPIC_ARN: !Ref LoginNotificationTopic
          BOOKING_CONFIRMATION_TOPIC_ARN: !Ref BookingConfirmationTopic

  RegistrationNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: registration-notification

  LoginNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: login-notification

  BookingConfirmationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: booking-confirmation

Outputs:
  RegistrationTopicArn:
    Description: "ARN of the registration notification topic"
    Value: !Ref RegistrationNotificationTopic

  LoginTopicArn:
    Description: "ARN of the login notification topic"
    Value: !Ref LoginNotificationTopic

  BookingConfirmationTopicArn:
    Description: "ARN of the booking confirmation notification topic"
    Value: !Ref BookingConfirmationTopic

  SendNotificationLambdaArn:
    Description: "ARN of the Send Notification Lambda function"
    Value: !GetAtt SendNotificationLambda.Arn

  SendNotificationLambdaIamRole:
    Description: "IAM Role for the Send Notification Lambda function"
    Value: !GetAtt NotificationRole.Arn
