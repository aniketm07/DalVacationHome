AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation template to create the DalVacationHome project.

Resources:
  # IAM Role
  LabRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: DalVacationHomeLabRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AdministrativeAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: '*'
                Resource: '*'
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/User-DalVacationHome
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Session-DalVacationHome
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Room-DalVacationHome
              - Effect: Allow
                Action:
                  - cognito-idp:AdminCreateUser
                  - cognito-idp:AdminInitiateAuth
                  - cognito-idp:AdminRespondToAuthChallenge
                  - cognito-idp:AdminGetUser
                Resource: arn:aws:cognito-idp:*:*:userpool/*
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: '*'

  # DynamoDB Table for User
  UserTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: User-DalVacationHome
      AttributeDefinitions:
        - AttributeName: email
          AttributeType: S
        - AttributeName: role
          AttributeType: S
      KeySchema:
        - AttributeName: email
          KeyType: HASH
        - AttributeName: role
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      Tags:
        - Key: Environment
          Value: Development

  # DynamoDB Table for Session
  SessionTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Session-DalVacationHome
      AttributeDefinitions:
        - AttributeName: email
          AttributeType: S
        - AttributeName: role
          AttributeType: S
      KeySchema:
        - AttributeName: email
          KeyType: HASH
        - AttributeName: role
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      Tags:
        - Key: Environment
          Value: Development

  # DynamoDB Table for Room
  RoomTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Room-DalVacationHome
      AttributeDefinitions:
        - AttributeName: roomId
          AttributeType: S
      KeySchema:
        - AttributeName: roomId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      Tags:
        - Key: Environment
          Value: Development
    
  # DynamoDB Table for Feedback
  FeedbackTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Feedback-DalVacationHome
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      Tags:
        - Key: Environment
          Value: Development
  
  # DynamoDB Table for Booking
  BookingTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Booking-DalVacationHome
      AttributeDefinitions:
        - AttributeName: bookingid
          AttributeType: S
      KeySchema:
        - AttributeName: bookingid
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      Tags:
        - Key: Environment
          Value: Development

  # Cognito User Pool
  UserPool:
    Type: AWS::Cognito::UserPool
    DependsOn: AutoConfirmUserLambda
    Properties:
      UserPoolName: DalVacationHome
      UsernameAttributes: []
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true
      MfaConfiguration: "OFF"
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      LambdaConfig:
        PreSignUp: !GetAtt AutoConfirmUserLambda.Arn
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      UserPoolAddOns:
        AdvancedSecurityMode: "OFF"
      Schema:
        - Name: email
          Required: true
          AttributeDataType: String
        - Name: role
          Required: false
          AttributeDataType: String
          Mutable: true

  # Add the Lambda function for user auto-confirmation
  AutoConfirmUserLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: DalVacationHome-AutoConfirmUser
      Handler: index.handler
      Role: !GetAtt LabRole.Arn
      Code:
        S3Bucket: "dalvacationhome"
        S3Key: "lambdas/auth/auto-confirm-user-v1.zip" # Replace with the Auto-Confirm User Lambda S3 key
      Runtime: nodejs20.x
      Timeout: 30  # Setting Lambda timeout to 30 seconds
  
  # Add the necessary permission for Cognito to invoke the Lambda trigger
  AutoConfirmUserLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AutoConfirmUserLambda
      Principal: cognito-idp.amazonaws.com
      SourceArn: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPool}

  # Cognito User Pool Client
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: DalVacationHomeSPA
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      AllowedOAuthFlowsUserPoolClient: false

  # Lambda Function for Registration
  RegisterationLambda:
    DependsOn:
      - UserTable
      - UserPool
      - UserPoolClient
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: DalVacationHome-Registeration
      Handler: index.handler
      Role: !GetAtt LabRole.Arn
      Code:
        S3Bucket: "dalvacationhome"
        S3Key: "lambdas/auth/user-registeration-v1.zip" # Replace with the Registration Lambda S3 key
      Runtime: nodejs20.x
      Timeout: 30
      Environment:
        Variables:
          USER_TABLE: !Ref UserTable
          COGNITO_CLIENT_ID: !Ref UserPoolClient

  # Lambda Function for Email and Password Login
  EmailPasswordLoginLambda:
    Type: AWS::Lambda::Function
    DependsOn:
      - UserTable
      - SessionTable
      - UserPool
      - UserPoolClient
    Properties:
      FunctionName: DalVacationHome-EmailPasswordLogin
      Handler: index.handler
      Role: !GetAtt LabRole.Arn
      Code:
        S3Bucket: "dalvacationhome"
        S3Key: "lambdas/auth/user-login-email-password-v1.zip"  # Replace with the Email and Password Login Lambda S3 key
      Runtime: nodejs20.x
      Timeout: 30
      Environment:
        Variables:
          USER_TABLE: !Ref UserTable
          SESSION_TABLE: !Ref SessionTable
          COGNITO_CLIENT_ID: !Ref UserPoolClient
          USER_POOL_ID: !Ref UserPool
  
  # Lambda Function for Security Question Login
  SecurityQuestionLoginLambda:
    Type: AWS::Lambda::Function
    DependsOn:
      - UserTable
      - SessionTable
      - UserPool
      - UserPoolClient
    Properties:
      FunctionName: DalVacationHome-SecurityQuestion
      Handler: index.handler
      Role: !GetAtt LabRole.Arn
      Code:
        S3Bucket: "dalvacationhome"
        S3Key: "lambdas/auth/user-login-security-question-v1.zip"  # Replace with the Security Question Login Lambda S3 key
      Runtime: nodejs20.x
      Timeout: 30
      Environment:
        Variables:
          USER_TABLE: !Ref UserTable
          SESSION_TABLE: !Ref SessionTable
          COGNITO_CLIENT_ID: !Ref UserPoolClient
          USER_POOL_ID: !Ref UserPool

  # Lambda Function for Ceasar Cipher Login
  CeasarCipherLoginLambda:
    Type: AWS::Lambda::Function
    DependsOn:
      - UserTable
      - SessionTable
    Properties:
      FunctionName: DalVacationHome-CeasarCipherLogin
      Handler: index.handler
      Role: !GetAtt LabRole.Arn
      Code:
        S3Bucket: "dalvacationhome"
        S3Key: "lambdas/auth/user-login-ceasar-cipher-v1.zip"  # Replace with the Ceasar Cipher Login Lambda S3 key
      Runtime: nodejs20.x
      Timeout: 30
      Environment:
        Variables:
          USER_TABLE: !Ref UserTable
          SESSION_TABLE: !Ref SessionTable

  # Lambda Function for Add Room
  AddRoomLambda:
    Type: AWS::Lambda::Function
    DependsOn:
      - RoomTable
    Properties:
      FunctionName: DalVacationHome-AddRoom
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LabRole.Arn
      Code:
        S3Bucket: "dalvacationhome"
        S3Key: "lambdas/rooms/add-room-v1.zip"  # Replace with the Add Room Lambda S3 key
      Runtime: python3.11
      Timeout: 30
      Environment:
        Variables:
          BUCKET_NAME: "dalvacationhome-room-image"
          REGION: "us-east-1"
          DYNAMODB_TABLE: !Ref RoomTable

  # Lambda Function for Get Room by ID
  GetRoomByIdLambda:
    Type: AWS::Lambda::Function
    DependsOn:
      - RoomTable
    Properties:
      FunctionName: DalVacationHome-GetRoomById
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LabRole.Arn
      Code:
        S3Bucket: "dalvacationhome"
        S3Key: "lambdas/rooms/get-room-by-id-v1.zip"  # Replace with the Get Room by ID Lambda S3 key
      Runtime: python3.11
      Timeout: 30
      Environment:
        Variables:
          REGION: "us-east-1"
          DYNAMODB_TABLE: !Ref RoomTable

  # Lambda Function for Get Rooms
  GetRoomsLambda:
    Type: AWS::Lambda::Function
    DependsOn:
      - RoomTable
    Properties:
      FunctionName: DalVacationHome-GetRooms
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LabRole.Arn
      Code:
        S3Bucket: "dalvacationhome"
        S3Key: "lambdas/rooms/get-rooms-v1.zip"  # Replace with the Get Rooms Lambda S3 key
      Runtime: python3.11
      Timeout: 30
      Environment:
        Variables:
          REGION: "us-east-1"
          DYNAMODB_TABLE: !Ref RoomTable

  # Lambda Function for Update Room
  UpdateRoomLambda:
    Type: AWS::Lambda::Function
    DependsOn:
      - RoomTable
    Properties:
      FunctionName: DalVacationHome-UpdateRoom
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LabRole.Arn
      Code:
        S3Bucket: "dalvacationhome"
        S3Key: "lambdas/rooms/update-room-v1.zip"  # Replace with the Update Room Lambda S3 key
      Runtime: python3.11
      Timeout: 30
      Environment:
        Variables:
          BUCKET_NAME: "dalvacationhome-room-image"
          REGION: "us-east-1"
          DYNAMODB_TABLE: !Ref RoomTable

  # Lambda Function for Add Feedback
  AddFeedbackLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: DalVacationHome-AddFeedback
      Handler: index.handler
      Role: !GetAtt LabRole.Arn
      Code:
        S3Bucket: "dalvacationhome"
        S3Key: "lambdas/feedback/add-feedback-v2.zip"
      Runtime: nodejs20.x
      Timeout: 30
      Environment:
        Variables:
          CUSTOMER_FEEDBACK_TABLE: !Ref FeedbackTable
          USER_TABLE: !Ref UserTable
  
  # Lambda Function for Get All Feedbacks
  GetAllFeedbacksLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: DalVacationHome-GetAllFeedbacks
      Handler: index.handler
      Role: !GetAtt LabRole.Arn
      Code:
        S3Bucket: "dalvacationhome"
        S3Key: "lambdas/feedback/get-all-feedbacks-v1.zip"
      Runtime: nodejs20.x
      Timeout: 30
      Environment:
        Variables:
          CUSTOMER_FEEDBACK_TABLE: !Ref FeedbackTable

  # Lambda Function for Get Feedback by room ID
  GetFeedbackByRoomIdLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: DalVacationHome-GetFeedbackByRoomId
      Handler: index.handler
      Role: !GetAtt LabRole.Arn
      Code:
        S3Bucket: "dalvacationhome"
        S3Key: "lambdas/feedback/get-feedback-roomId-v1.zip"
      Runtime: nodejs20.x
      Timeout: 30
      Environment:
        Variables:
          CUSTOMER_FEEDBACK_TABLE: !Ref FeedbackTable

  # Lambda Function for Get Booking Details For Lex
  GetBookingDetailsLambdaForLex:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: DalVacationHome-GetBookingDetailsForLex
      Handler: index.handler
      Role: !GetAtt LabRole.Arn
      Code:
        S3Bucket: "dalvacationhome"
        S3Key: "lambdas/lex/get-booking-details-lex-v2.zip"  # Replace with the Get Booking Details Lambda S3 key
      Runtime: nodejs20.x
      Timeout: 30
      Environment:
        Variables:
          BOOKING_TABLE: !Ref BookingTable

  # Policy for Lex intent BookingDetails
  GetBookingDetailsLambdaPolicyLexIntent:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetBookingDetailsLambdaForLex
      Action: "lambda:InvokeFunction"
      Principal: "lex.amazonaws.com"
      SourceArn: "arn:aws:lex:us-east-1:883002755650:intent:BookingDetails:*"

  # Policy for Lex bot DalVacationHome
  GetBookingDetailsLambdaPolicyLexBot:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetBookingDetailsLambdaForLex
      Action: "lambda:InvokeFunction"
      Principal: "lex.amazonaws.com"
      SourceArn: "arn:aws:lex:us-east-1:883002755650:bot:DalVacationHome:*"
  
  # Lambda Function for Ticket Creation For Lex
  TicketCreationLambdaForLex:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: DalVacationHome-CreateTicket
      Handler: index.handler
      Role: !GetAtt LabRole.Arn
      Code:
        S3Bucket: "dalvacationhome"
        S3Key: "lambdas/ticket/DalVacationHome-CreateTicket-v1.zip"  # Replace with the Ticket Creation Lambda S3 key
      Runtime: nodejs20.x
      Timeout: 30
      Environment:
        Variables:
          USER_TABLE: !Ref UserTable
          API_URL: https://us-central1-sdpproject-team19.cloudfunctions.net/publishMessage

  # Policy for Lex intent TicketIntent
  TicketCreationLambdaPolicyLexIntent:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref TicketCreationLambdaForLex
      Action: "lambda:InvokeFunction"
      Principal: "lex.amazonaws.com"
      SourceArn: "arn:aws:lex:us-east-1:883002755650:intent:TicketIntent:*"

  # Policy for Lex bot DalVacationHome
  TicketCreationLambdaPolicyLexBot:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref TicketCreationLambdaForLex
      Action: "lambda:InvokeFunction"
      Principal: "lex.amazonaws.com"
      SourceArn: "arn:aws:lex:us-east-1:883002755650:bot:DalVacationHome:*"

  # API Gateway
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: DalVacationHomeAPI
      Description: API Gateway for DalVacationHome
  
  # Cognito Authorizer for API Gateway
  DalVacationHomeCognitoAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: DalVacationHomeCognitoAuthorizer
      IdentitySource: method.request.header.Authorization
      RestApiId: !Ref ApiGateway
      Type: COGNITO_USER_POOLS
      ProviderARNs:
        - !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPool}

  # /auth resource
  AuthResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: auth
      RestApiId: !Ref ApiGateway
    DependsOn: ApiGateway
  
  # /api resource
  ApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: api
      RestApiId: !Ref ApiGateway
    DependsOn: ApiGateway

  # /auth/registeration resource
  RegistrationResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref AuthResource
      PathPart: registeration
      RestApiId: !Ref ApiGateway
    DependsOn: AuthResource

  # POST Method for /auth/registeration
  RegistrationMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref RegistrationResource
      RestApiId: !Ref ApiGateway
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RegisterationLambdaArn}/invocations
          - RegisterationLambdaArn: !GetAtt RegisterationLambda.Arn
    DependsOn: 
      - RegistrationResource
      - RegisterationLambda

  # Enable CORS for /auth/registeration
  RegistrationMethodOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref RegistrationResource
      RestApiId: !Ref ApiGateway
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        PassthroughBehavior: WHEN_NO_MATCH
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # /auth/login resource
  LoginResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref AuthResource
      PathPart: login
      RestApiId: !Ref ApiGateway
    DependsOn: AuthResource

  # POST Method for /auth/login
  LoginMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref LoginResource
      RestApiId: !Ref ApiGateway
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EmailPasswordLoginLambdaArn}/invocations
          - EmailPasswordLoginLambdaArn: !GetAtt EmailPasswordLoginLambda.Arn
    DependsOn: 
      - LoginResource
      - EmailPasswordLoginLambda

  # Enable CORS for /auth/login
  LoginMethodOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref LoginResource
      RestApiId: !Ref ApiGateway
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        PassthroughBehavior: WHEN_NO_MATCH
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
  
  # /auth/cipher resource
  CeasarCipherResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref AuthResource
      PathPart: cipher
      RestApiId: !Ref ApiGateway
    DependsOn: AuthResource

  # POST Method for /auth/cipher
  CeasarCipherMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref CeasarCipherResource
      RestApiId: !Ref ApiGateway
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CeasarCipherLoginLambdaArn}/invocations
          - CeasarCipherLoginLambdaArn: !GetAtt CeasarCipherLoginLambda.Arn
    DependsOn: 
      - CeasarCipherResource
      - CeasarCipherLoginLambda

  # Enable CORS for /auth/cipher
  CeasarCipherMethodOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref CeasarCipherResource
      RestApiId: !Ref ApiGateway
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        PassthroughBehavior: WHEN_NO_MATCH
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # /auth/security resource
  SecurityQuestionResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref AuthResource
      PathPart: security
      RestApiId: !Ref ApiGateway
    DependsOn: AuthResource

  # POST Method for /auth/security
  SecurityQuestionMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref SecurityQuestionResource
      RestApiId: !Ref ApiGateway
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SecurityQuestionLoginLambdaArn}/invocations
          - SecurityQuestionLoginLambdaArn: !GetAtt SecurityQuestionLoginLambda.Arn
    DependsOn: 
      - SecurityQuestionResource
      - SecurityQuestionLoginLambda

  # Enable CORS for /auth/security
  SecurityMethodOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref SecurityQuestionResource
      RestApiId: !Ref ApiGateway
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        PassthroughBehavior: WHEN_NO_MATCH
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # /api/rooms resource
  RoomsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref ApiResource
      PathPart: rooms
      RestApiId: !Ref ApiGateway
    DependsOn: ApiResource

  # POST Method for /api/rooms
  AddRoomMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref DalVacationHomeCognitoAuthorizer
      HttpMethod: POST
      ResourceId: !Ref RoomsResource
      RestApiId: !Ref ApiGateway
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddRoomLambdaArn}/invocations
          - AddRoomLambdaArn: !GetAtt AddRoomLambda.Arn
    DependsOn: 
      - RoomsResource
      - AddRoomLambda

  # Enable CORS for /api/rooms
  RoomMethodOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref RoomsResource
      RestApiId: !Ref ApiGateway
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,GET,PATCH'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        PassthroughBehavior: WHEN_NO_MATCH
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # /api/rooms/{roomId} resource
  RoomByIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref RoomsResource
      PathPart: "{roomId}"
      RestApiId: !Ref ApiGateway
    DependsOn: RoomsResource

  # GET Method for /api/rooms/{roomId}
  GetRoomByIdMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      ResourceId: !Ref RoomByIdResource
      RestApiId: !Ref ApiGateway
      RequestParameters:
        method.request.path.roomId: true
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetRoomByIdLambdaArn}/invocations
          - GetRoomByIdLambdaArn: !GetAtt GetRoomByIdLambda.Arn
        IntegrationResponses:
          - StatusCode: 200
        RequestParameters:
          integration.request.path.roomId: 'method.request.path.roomId'
        RequestTemplates:
          application/json: |
            {
              "roomId": "$input.params('roomId')"
            }
      MethodResponses:
        - StatusCode: 200
    DependsOn: 
      - RoomByIdResource
      - GetRoomByIdLambda

  # Enable CORS for /api/rooms/{roomId} (GET)
  GetRoomByIdMethodOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref RoomByIdResource
      RestApiId: !Ref ApiGateway
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        PassthroughBehavior: WHEN_NO_MATCH
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # GET Method for /api/rooms
  GetRoomsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      ResourceId: !Ref RoomsResource
      RestApiId: !Ref ApiGateway
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetRoomsLambdaArn}/invocations
          - GetRoomsLambdaArn: !GetAtt GetRoomsLambda.Arn
        IntegrationResponses:
          - StatusCode: 200
      MethodResponses:
        - StatusCode: 200
    DependsOn: 
      - RoomsResource
      - GetRoomsLambda

  # PATCH Method for /api/rooms
  UpdateRoomMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref DalVacationHomeCognitoAuthorizer
      HttpMethod: PATCH
      ResourceId: !Ref RoomsResource
      RestApiId: !Ref ApiGateway
      Integration:
        IntegrationHttpMethod: PATCH
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateRoomLambdaArn}/invocations
          - UpdateRoomLambdaArn: !GetAtt UpdateRoomLambda.Arn
    DependsOn: 
      - RoomsResource
      - UpdateRoomLambda

  # /api/feedback resource
  FeedbackResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref ApiResource
      PathPart: feedback
      RestApiId: !Ref ApiGateway
    DependsOn: ApiResource
  
  # POST Method for /api/feedback
  AddFeedbackMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref DalVacationHomeCognitoAuthorizer
      HttpMethod: POST
      ResourceId: !Ref FeedbackResource
      RestApiId: !Ref ApiGateway
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddFeedbackLambdaArn}/invocations
          - AddFeedbackLambdaArn: !GetAtt AddFeedbackLambda.Arn
    DependsOn: 
      - FeedbackResource
      - AddFeedbackLambda
  
  # Enable CORS for /api/feedback
  FeedbackMethodOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref FeedbackResource
      RestApiId: !Ref ApiGateway
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,GET'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        PassthroughBehavior: WHEN_NO_MATCH
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
  
  # GET Method for /api/feedback
  GetAllFeedbacksMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref DalVacationHomeCognitoAuthorizer
      HttpMethod: GET
      ResourceId: !Ref FeedbackResource
      RestApiId: !Ref ApiGateway
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetAllFeedbacksLambdaArn}/invocations
          - GetAllFeedbacksLambdaArn: !GetAtt GetAllFeedbacksLambda.Arn
        IntegrationResponses:
          - StatusCode: 200
      MethodResponses:
        - StatusCode: 200
    DependsOn: 
      - FeedbackResource
      - GetAllFeedbacksLambda
  
  # /api/feedback/{roomId} resource
  FeedbackByRoomIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref FeedbackResource
      PathPart: "{roomId}"
      RestApiId: !Ref ApiGateway
    DependsOn: FeedbackResource
  
  # GET Method for /api/feedback/{roomId}
  FeedbackByRoomByIdMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      ResourceId: !Ref FeedbackByRoomIdResource
      RestApiId: !Ref ApiGateway
      RequestParameters:
        method.request.path.roomId: true
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetFeedbackByRoomIdLambdaArn}/invocations
          - GetFeedbackByRoomIdLambdaArn: !GetAtt GetFeedbackByRoomIdLambda.Arn
        IntegrationResponses:
          - StatusCode: 200
        RequestParameters:
          integration.request.path.roomId: 'method.request.path.roomId'
        RequestTemplates:
          application/json: |
            {
              "roomId": "$input.params('roomId')"
            }
      MethodResponses:
        - StatusCode: 200
    DependsOn: 
      - FeedbackByRoomIdResource
      - GetFeedbackByRoomIdLambda
  
  # Enable CORS for /api/feedback/{roomId} (GET)
  GetFeedbackByRoomByIdMethodOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref FeedbackByRoomIdResource
      RestApiId: !Ref ApiGateway
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        PassthroughBehavior: WHEN_NO_MATCH
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # Permissions to invoke Lambda from API Gateway
  RegisterationLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref RegisterationLambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/auth/registeration
    DependsOn: RegistrationMethod

  LoginLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref EmailPasswordLoginLambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/auth/login
    DependsOn: LoginMethod

  SecurityQuestionLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SecurityQuestionLoginLambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/auth/security
    DependsOn: SecurityQuestionMethod
  
  CeasarCipherLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CeasarCipherLoginLambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/auth/cipher
    DependsOn: CeasarCipherMethod
  
  AddRoomLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AddRoomLambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/api/rooms
    DependsOn: AddRoomMethod

  GetRoomByIdLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GetRoomByIdLambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/GET/api/rooms/{roomId}
    DependsOn: GetRoomByIdMethod

  GetRoomsLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GetRoomsLambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/GET/api/rooms
    DependsOn: GetRoomsMethod

  UpdateRoomLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref UpdateRoomLambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/PATCH/api/rooms
    DependsOn: UpdateRoomMethod
  
  AddFeedbackLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AddFeedbackLambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/api/feedback
    DependsOn: AddFeedbackMethod

  GetAllFeedbacksLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GetAllFeedbacksLambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/GET/api/feedback
    DependsOn: GetAllFeedbacksMethod
  
  GetFeedbackByRoomByIdLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GetFeedbackByRoomIdLambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/GET/api/feedback/{roomId}
    DependsOn: FeedbackByRoomByIdMethod

  # Deployment of API to prod stage
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: prod
    DependsOn:
      - RegistrationMethod
      - LoginMethod
      - RegistrationMethodOptions
      - LoginMethodOptions
      - CeasarCipherMethod
      - SecurityQuestionMethod
      - AddRoomMethod
      - RoomMethodOptions
      - GetRoomByIdMethod
      - GetRoomByIdMethodOptions
      - GetRoomsMethod
      - UpdateRoomMethod
      - AddFeedbackMethod
      - FeedbackMethodOptions
      - GetAllFeedbacksMethod

Outputs:
  ApiGatewayUrl:
    Description: "API Gateway URL"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/"
